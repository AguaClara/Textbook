# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2020, AguaClara Cornell
# This file is distributed under the same license as the AguaClara Textbook
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: AguaClara Textbook EXPERIMENTAL\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-08-19 16:17-0400\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../Introduction/Python_Tutorial.rst:5
msgid "Python Tutorial"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:11
msgid "Code resources."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Description"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Theme"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Example function"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Function call"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "`Python functions <http://docs.python.org/3/library/functions.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "low level programming functions"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "open a file"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "open(file, mode='r')"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"`Pint universal constants "
"<https://github.com/hgrecco/pint/blob/master/pint/constants_en.txt>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "physical constants with units"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Avogadro's number"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "u.avogadro_number"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"`Pint units "
"<https://github.com/hgrecco/pint/blob/master/pint/default_en.txt>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "units that can be attached to numbers and numpy arrays"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "5 m/s"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "5* u.mm/u.s"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"aguaclara.core. `physchem "
"<https://github.com/AguaClara/aguaclara/blob/master/aguaclara/core/physchem.py>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "pipeflow, orifices, viscosity of water, weirs, manifolds, Kozeny equation"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "total head loss in a straight pipe"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "headloss(FlowRate, Diam, Length, Nu, PipeRough, KMinor)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"aguaclara.research. `floc_model "
"<https://github.com/AguaClara/aguaclara/blob/master/aguaclara/research/floc_model.py>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "AguaClara flocculation model, velocity gradients, Kolmogorov length scales"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "velocity gradient in a coiled tube"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "g_coil(FlowPlant, IDTube, RadiusCoil, Temp)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"aguaclara.research. `environmental_processes_analysis "
"<https://github.com/AguaClara/aguaclara/blob/master/aguaclara/research/environmental_processes_analysis.py>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "carbonate system, CMFR and advection dispersion reactor analysis"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "extract data from ProCoDA generated Gran analysis file"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Gran(data_file_path)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"aguaclara.research. `procoda_parser "
"<https://github.com/AguaClara/aguaclara/blob/master/aguaclara/research/procoda_parser.py>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"Extracts data from multiple ProCoDA files based on the state and data "
"column"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "extract a column of data from a ProCoDA data file"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "column_of_data(data_file_path, start, column)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "`SciPy <https://docs.scipy.org/doc/scipy/reference/>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"computing integrals numerically, solving differential equations, "
"optimization, and sparse matrices"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "root finding"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "root(func, 0.3)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "`NumPy <https://docs.scipy.org/doc/numpy/user/quickstart.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Array manipulation and math functions"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "create an array with linearly spaced elements"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid ""
"np. `linspace "
"<https://docs.scipy.org/doc/numpy/reference/generated/numpy.linspace.html#numpy.linspace>`_"
" (start,stop,num)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "`PyPlot <https://matplotlib.org/tutorials/index.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Graphs!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "Create beautiful graphs"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:1
msgid "see below"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:28
msgid "Import statements"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:41
msgid ""
"Hint: If you are typing a function name and want to know what the options"
" are for completing what you are typing, just hit the tab key for a menu "
"of options."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:43
msgid ""
"Hint: If you want to see the source code associated with a function, you "
"can do the following import inspect inspect.getsource(foo)"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:46
msgid "Where “foo” is the function that you’d like to learn about."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:49
msgid "Markdown"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:51
msgid ""
"Markdown allow you to mix code, beautiful Latex equations, nicely "
"formatted text, figures, and tables."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:55
msgid ""
"Markdown does not handle automatic numbering of equations, figures, and "
"tables."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:57
msgid ""
"The Python Kernel remembers all definitions (functions and variables) as "
"they are defined based on execution. Thus if you fail to execute a line "
"of code, the parameters defined in that line won’t be available. "
"Similarly, if you define a parameter and then delete that line of code, "
"that parameter remains defined until you reset all runtimes or restart."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:59
msgid ""
"Before submitting a file for others to use, you need to verify that all "
"of the dependencies are defined and that you didn't accidently delete a "
"definition that is required. You can do this by resetting all runtimes "
"(Runtime menu) and then running all."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:62
msgid "Transitioning From Matlab To Python"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:64
msgid ""
"**Indentation** - When writing functions or using statements, Python "
"recognizes code blocks from the way they are indented. A code block is a "
"group of statements that, together, perform a task. A block begins with a"
" header that is followed by one or more statements that are indented with"
" respect to the header. The indentation indicates to the Python "
"interpreter, and to programmers that are reading the code, that the "
"indented statements and the preceding header form a code block."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:66
msgid ""
"**Suppressing Statements** - Unlike Matlab, you do not need a semi-colon "
"to suppress a statement in Python;"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:68
msgid "**Indexing** - Matlab starts at index 1 whereas Python starts at index 0."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:70
msgid ""
"**Functions** - In Matlab, functions are written by invoking the keyword "
"“function”, the return parameter(s), the equal to sign, the function name"
" and the input parameters. A function is terminated with “end”.::"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:79
msgid ""
"In Python, functions can be written by using the keyword “def”, followed "
"by the function name and then the input parameters in parenthesis "
"followed by a colon. A function is terminated with “return”.::"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:86
msgid ""
"**Statements** - for loops and if statements do not require the keyword "
"“end” in Python. The loop header in Matlab varies from that of Python. "
"Check examples below:"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:88
msgid "Matlab code::"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:98
msgid "**Printing** - Use “print()” in Python instead of “disp” in Matlab."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:100
msgid "**Helpful Documents**"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:102
msgid ""
"`Numpy for Matlab Users <https://docs.scipy.org/doc/numpy-dev/user/numpy-"
"for-matlab-users.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:103
msgid ""
"`Stepping from Matlab to Python <http://stsievert.com/blog/2015/09/01"
"/matlab-to-python/>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:104
msgid ""
"`Python for Matlab Users, UC Boulder "
"<http://researchcomputing.github.io/meetup_fall_2014/pdfs/fall2014_meetup13_python_matlab.pdf>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:107
msgid "Units"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:109
msgid ""
"Engineering requires calculations with units. Prior to modern computer "
"languages engineers used paper and pencil, slide rules, calculators, and "
"more recently spreadsheets to do calculations. All of these methods are "
"prone to calculation errors because units aren't handled as an essential "
"part of each value. Spreadsheets are especially notorious for calculation"
" errors because unit conversions are buried in formulas that are hidden "
"in the cells."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:111
msgid ""
"Operations on values with units follow very clear algebraic rules and "
"thus units can be attached to numerical values and carried through math "
"operations. This capability is implemented in Python using `Pint "
"<https://pint.readthedocs.io/en/latest/>`_ . The Pint package includes a "
"host of units and prefixes (such as :math:`\\mu` for :math:`10^{-6}`). As"
" you master using Python and Pint you will say goodbye to mindless unit "
"conversions forever!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:113
msgid ""
"Environmental engineers historically described surface loading rates for "
"sedimentation tanks using units of gal/min per square foot. How fast is "
":math:`\\frac{1 gpm}{ft^2}` in :math:`\\frac{mm}{s}`?"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:121
msgid "The surface loading rate is 0.6791 millimeter / second"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:123
msgid ""
"After reducing the number of significant digits to 2 we obtain: The "
"surface loading rate is 0.68 millimeter / second"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:126
msgid ""
"How long does it take to stop a car that is initially traveling at 60 mph"
" if the coefficient of friction is 0.5?"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:137
msgid "The time to stop the car is 120 mile / hour / standard_gravity"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:139
msgid "We add the .to_base_units() directive to force pint to simplify the units."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:141
msgid "The time to stop the car is 5.47 second"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:143
msgid ""
"Many functions written in Python do not yet handle units and thus it is "
"sometimes necessary to remove the units. Examples include graphs "
"(althougth units might be coming to matplotlib), SciPy functions, and the"
" NumPy functions used to populate arrays. For these cases you can strip "
"the units off a number using the .magnitude method. Be careful to make "
"sure you know what the units are before you remove them otherwise you may"
" be confused by the results!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:156
msgid "The volume is 15 gallon * hour / minute"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:158
msgid "The magnitude of the Volume is 15.0"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:160
msgid "The units of the flow are gallon * hour / minute"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:162
msgid "The volume is 3.41 kiloliter"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:164
msgid ""
"It is useful to force pint to display the result in the units of your "
"choice."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:168
msgid "Arrays and units"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:170
msgid ""
"Use NumPy arrays rather than Python lists to enable math with numbers and"
" units. When creating arrays with units remember that"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:172
msgid "Array elements don't have units!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:173
msgid "Arrays can have units."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:175
msgid ""
"Therefore always attach units to the array after the array has been "
"created. This means that array elements should be dimensionless and thus "
"arrays must be created using dimensionless values."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:177
msgid ""
"We can use NumPy linspace with a simple change to make it dimensionless. "
"Usually linspace has start and stop elements that would logically have "
"units: np.linspace(start, stop, num). But elements can't have units! We "
"can make the inputs to linspace be dimensionless to create a "
"dimensionless array and then multiplies it by the final value that "
"includes the units to scale the array correctly. For evenly spaced arrays"
" starting at the end of the first space we have either:"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:179
msgid "np.linspace(start/stop, 1, num) * stop"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:180
msgid "np.linspace(1 / num, 1, num) * stop"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:182
msgid "For evenly spaced arrays starting with zero we have:"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:184
msgid "np.linspace(0, 1, num+1) * stop!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:186
msgid ""
"The print function can't currently handle arrays with units. The array "
"can be printed nicely in two steps as shown below."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:202
msgid "[  2.   4.   6.   8.  10.  12.  14.  16.  18.  20.] liter / second"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:206
msgid "Plotting"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:208
msgid ""
"We will use this `pyplot coding style "
"<https://matplotlib.org/tutorials/introductory/usage.html#coding-"
"styles>`_ ."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:210
msgid "fig is a Figure instance—like a blank canvas"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:211
msgid "ax is an AxesSubplot instance—think of a frame for plotting in"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:213
msgid ""
"Create a graph showing flow rate vs depth for two linear flow orifice "
"meters that have a depth range of 20 cm and flow ranges of 50 and 70 L/s."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:215
msgid ""
"`Legend location options "
"<https://matplotlib.org/api/_as_gen/matplotlib.pyplot.legend.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:216
msgid "`Colors <https://matplotlib.org/api/colors_api.html>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:218
msgid "'b', 'g', 'r', 'c', 'm', 'y', 'k', 'w'"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:219
msgid "blue, green, red, cyan, magenta, yellow, black, white"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:221
msgid ""
"`Data markers (if you are plotting data and not a model or curve fit) "
"<https://matplotlib.org/api/markers_api.html#module-matplotlib.markers>`_"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:268
msgid ""
"The flow through an LFOM is directly proportional to the height of the "
"water above the bottom of the first row of orifices."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:273
msgid ""
"Indexing is done by row and then by column. To call all of the elements "
"in a row or column, use a colon. As you can see in the following example,"
" indexing in python begins at zero. So ``a[:,1]`` is calling all rows in "
"the second column"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:295
msgid "Example problem"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:297
msgid ""
"Calculate the number of moles of methane in a 20 L container at 15 psi "
"above atmospheric pressure with a temperature of 30 C."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:311
msgid "There are  1.625 mole  of methane in the container."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:315
msgid "Functions"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:317
msgid ""
"When it becomes necessary to do the same calculation multiple times, it "
"is useful to create a function to facilitate the calculation in the "
"future."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:319
msgid ""
"Function blocks begin with the keyword def followed by the function name "
"and parentheses ( )."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:320
msgid ""
"Any input parameters or arguments should be placed within these "
"parentheses."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:321
msgid ""
"The code block within every function starts with a colon (:) and is "
"indented."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:322
msgid ""
"The statement return [expression] exits a function and returns an "
"expression to the user. A return statement with no arguments is the same "
"as return None."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:323
msgid ""
"(Optional) The first statement of a function can the documentation string"
" of the function or docstring, written with apostrophes ."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:325
msgid ""
"Below is an example of a function that takes three inputs, pressure, "
"volume, and temperature, and returns the number of moles."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:333
msgid ""
"Try using the new function to solve the same problem as above. You can "
"reuse the variables. You can use the new function call inside the print "
"statement."
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:344
msgid "Pipe Database"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:346
msgid ""
"The `pipes "
"<https://github.com/AguaClara/aguaclara/blob/master/aguaclara/core/pipes.py>`_"
" has many useful functions concerning pipe sizing. It provides functions "
"that calculate actual pipe inner and outer diameters given the nominal "
"diameter of the pipe. Note that nominal diameter just means the diameter "
"that it is called (hence the discriptor “nominal”) and thus a 1 inch "
"nominal diameter pipe might not have any dimensions that are actually 1 "
"inch!"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:354
msgid "6.625 inch"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:356
msgid ""
"The ND_SDR_available function returns the nominal diameter of a pipe that"
" has an inner diameter equal to or greater than the requested inner "
"diameter `SDR, standard diameter ratio <http://www.engineeringtoolbox.com"
"/sdr-standard-dimension-ratio-d_318.html>`_ . Below we find the smallest "
"available pipe that has an inner diameter of at least 7 cm"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:365
msgid "3.0 inch"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:367
msgid "The actual inner diameter of this pipe is"
msgstr ""

#: ../../Introduction/Python_Tutorial.rst:378
msgid "We can display the available nominal pipe sizes that are in our database."
msgstr ""

